import Catamorphism from './Catamorphism';
import Maybe from './Maybe';
export declare class Just<A> extends Maybe<A> {
    private value;
    constructor(value: A);
    getOrElse(fn: () => A): A;
    getOrElseValue(defaultValue: A): A;
    map<B>(fn: (a: A) => B): Maybe<B>;
    andThen<B>(fn: (a: A) => Maybe<B>): Maybe<B>;
    orElse(fn: () => Maybe<A>): Maybe<A>;
    cata<B>(matcher: Catamorphism<A, B>): B;
    assign<K extends string, B>(k: K, other: Maybe<B> | ((a: A) => Maybe<B>)): Maybe<A & {
        [k in K]: B;
    }>;
    do(fn: (a: A) => void): Maybe<A>;
    elseDo(fn: () => void): Maybe<A>;
}
export declare const just: <A>(value: A) => Maybe<A>;
export default Just;
