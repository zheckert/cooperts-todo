import Catamorphism from './Catamorphism';
declare abstract class Maybe<A> {
    abstract getOrElse(fn: () => A): A;
    abstract getOrElseValue(defaultValue: A): A;
    abstract map<B>(fn: (a: A) => B): Maybe<B>;
    and<B>(fn: (a: A) => B): Maybe<B>;
    abstract andThen<B>(fn: (a: A) => Maybe<B>): Maybe<B>;
    abstract orElse(fn: () => Maybe<A>): Maybe<A>;
    abstract cata<B>(matcher: Catamorphism<A, B>): B;
    abstract assign<K extends string, B>(k: K, other: Maybe<B> | ((a: A) => Maybe<B>)): Maybe<A & {
        [k in K]: B;
    }>;
    abstract do(fn: (a: A) => void): Maybe<A>;
    abstract elseDo(fn: () => void): Maybe<A>;
}
export default Maybe;
