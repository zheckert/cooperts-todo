"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ok = void 0;
var Result_1 = __importDefault(require("./Result"));
var Ok = (function (_super) {
    __extends(Ok, _super);
    function Ok(value) {
        var _this = _super.call(this) || this;
        _this.value = value;
        return _this;
    }
    Ok.prototype.getOrElse = function (fn) {
        return this.value;
    };
    Ok.prototype.getOrElseValue = function (_) {
        return this.value;
    };
    Ok.prototype.map = function (fn) {
        return new Ok(fn(this.value));
    };
    Ok.prototype.mapError = function (fn) {
        return new Ok(this.value);
    };
    Ok.prototype.andThen = function (fn) {
        return fn(this.value);
    };
    Ok.prototype.orElse = function (fn) {
        return this;
    };
    Ok.prototype.cata = function (matcher) {
        return matcher.Ok(this.value);
    };
    Ok.prototype.assign = function (k, other) {
        var _this = this;
        var result = other instanceof Result_1.default ? other : other(this.value);
        return result.map(function (b) {
            var _a;
            return (__assign(__assign({}, Object(_this.value)), (_a = {}, _a[k.toString()] = b, _a)));
        });
    };
    Ok.prototype.do = function (fn) {
        fn(this.value);
        return new Ok(this.value);
    };
    Ok.prototype.elseDo = function (fn) {
        return this;
    };
    return Ok;
}(Result_1.default));
var ok = function (v) { return new Ok(v); };
exports.ok = ok;
exports.default = Ok;
//# sourceMappingURL=Ok.js.map