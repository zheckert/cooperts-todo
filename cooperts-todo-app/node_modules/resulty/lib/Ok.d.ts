import Catamorphism from './Catamorphism';
import Result from './Result';
declare class Ok<E, A> extends Result<E, A> {
    private value;
    constructor(value: A);
    getOrElse(fn: () => A): A;
    getOrElseValue(_: A): A;
    map<B>(fn: (a: A) => B): Result<E, B>;
    mapError<X>(fn: (e: E) => X): Result<X, A>;
    andThen<B>(fn: (a: A) => Result<E, B>): Result<E, B>;
    orElse(fn: (_: any) => Result<any, A>): Result<any, A>;
    cata<B>(matcher: Catamorphism<E, A, B>): B;
    assign<K extends string, B>(k: K, other: Result<E, B> | ((a: A) => Result<E, B>)): Result<E, A & {
        [k in K]: B;
    }>;
    do(fn: (a: A) => void): Result<E, A>;
    elseDo(fn: (err: E) => void): Result<E, A>;
}
declare const ok: <E, T>(v: T) => Result<E, T>;
export default Ok;
export { ok };
